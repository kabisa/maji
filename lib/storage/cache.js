// Generated by CoffeeScript 1.9.3
(function() {
  var ApplicationState, CACHE_KEY_PREFIX, Cache, CacheItem, ItemCache, _;

  _ = require('underscore');

  ApplicationState = require('./application_state');

  CACHE_KEY_PREFIX = 'cache:';

  CacheItem = (function() {
    function CacheItem(value1, ttl) {
      this.value = value1;
      this.expiresAt = new Date(new Date().getTime() + (ttl * 1000));
    }

    return CacheItem;

  })();

  ItemCache = (function() {
    function ItemCache(cache, key1, opts1) {
      this.cache = cache;
      this.key = key1;
      this.opts = opts1;
    }

    ItemCache.prototype.get = function() {
      return this.cache.get(this.key);
    };

    ItemCache.prototype.set = function(value) {
      return this.cache.set(this.key, value, this.opts);
    };

    return ItemCache;

  })();

  Cache = (function() {
    function Cache() {}

    Cache.prototype.getCacheFor = function(key, opts) {
      return new ItemCache(this, key, opts);
    };

    Cache.prototype.set = function(key, value, arg) {
      var item, ttl;
      ttl = arg.ttl;
      item = new CacheItem(value, ttl);
      return ApplicationState.set(this._key(key), item);
    };

    Cache.prototype.get = function(key) {
      this._purgeExpiredItems();
      return this._rawGet(this._key(key)) || null;
    };

    Cache.prototype._rawGet = function(key) {
      var ref;
      return (ref = ApplicationState.get(key)) != null ? ref.value : void 0;
    };

    Cache.prototype._key = function(name) {
      return CACHE_KEY_PREFIX + name;
    };

    Cache.prototype._purgeExpiredItems = function() {
      return _.chain(Object.keys(localStorage)).filter(function(key) {
        return new RegExp("^" + CACHE_KEY_PREFIX).test(key);
      }).map((function(_this) {
        return function(key) {
          return [key, _this._rawGet(key)];
        };
      })(this)).filter((function(_this) {
        return function(arg) {
          var item, key;
          key = arg[0], item = arg[1];
          return new Date(item.expiresAt) < _this._currentDate();
        };
      })(this)).each(function(arg) {
        var item, key;
        key = arg[0], item = arg[1];
        return ApplicationState.reset(key);
      });
    };

    Cache.prototype._currentDate = function() {
      return new Date();
    };

    return Cache;

  })();

  module.exports = new Cache();

}).call(this);
