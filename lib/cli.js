#!/usr/bin/env node
// Generated by CoffeeScript 1.9.3
(function() {
  var executeScript, path, program, spawn;

  spawn = require('child_process').spawn;

  path = require('path');

  program = require('commander');

  program.version('1.0.0');

  executeScript = function(scriptName, args) {
    var child;
    child = spawn(path.resolve(__dirname + ("/../script/" + scriptName)), args);
    child.stdout.on('data', function(data) {
      return process.stdout.write(data);
    });
    child.stderr.on('data', function(data) {
      return process.stderr.write(data.toString());
    });
    return child.on('exit', function(exitCode) {
      return process.exit(exitCode);
    });
  };

  program.command('run <platform>').description('build and run a native app for the specified platform').option('-e, --emulator', 'run on emulator instead of an actual device').action(function(platform, options) {
    var deviceTypeArg;
    deviceTypeArg = options.emulator ? '--emulator' : '--device';
    return executeScript('run-on-device', [platform, deviceTypeArg]);
  });

  program.command('build <platform>').description('build a native app for the specified platform').option('--release', 'create a release build').action(function(platform, options) {
    var releaseArg;
    releaseArg = options.release ? '--release' : '--debug';
    return executeScript('build-app', [platform, releaseArg]);
  });

  program.command('new <package_name> <path>').description('create a new Maji app').on('--help', function() {
    return console.log('  Example:\n  maji new org.example.my-app ~/Code/my-app');
  }).action(function(packageName, path) {
    if (!packageName.match(/.*\..*\..*/)) {
      console.log('Please specify a valid package name, for example org.example.my-app');
      process.exit(1);
    }
    return executeScript('create-project', [packageName, path]);
  });

  program.on('--help', function() {
    return process.exit(1);
  });

  program.on('*', function(action) {
    console.log("Unknown command '" + action + "'");
    return program.help();
  });

  program.parse(process.argv);

  if (!process.argv.slice(2).length) {
    program.help();
  }

}).call(this);
